#lang racket

(define (desest lista)
    (define (aux l)
        (if (null? (cdr l))
            (if (list? (car l))
                (aux (car l))
                (list (car l))
            )
            (if (list? (car l))
                (append (aux (car l)) (aux (cdr l)))
                (append (list (car l)) (aux (cdr l)))
            )
        )
    )
    (aux lista)
)

(desest '(1 (2 (3) (5 6))))


(define (combl l y)
    (if (list? l )
        (if (null? (cdr l))
            (cons (car l) y)
            (cons (car l) (combl (cdr l) y))
        )
        (append (list l) y)
    )
)

(define (add2num x y)
    (if (list? y)
        (if (list? x)
            (combl (desest x) y)
            (cons x y)
        )
        (if (list? x)
            (combl (desest x) (list y))
            (list x y)
        )
    )
)

(add2num '(a (4) 4) 4)
(add2num 'a 'b)
(add2num '(1 2 (3)) '(4 5 6))
(add2num 'a '(1 4 6))
(add2num '(1 (2 (3 4 (5)) (6 7))) '(8 9))